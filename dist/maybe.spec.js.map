{"version":3,"sources":["../src/maybe.spec.js"],"names":["createErroneousMonad","createSuccessfulMonad","getErroneousValue","getSuccessfulValue","isInErrorState","toString","name","assertions","when","should","test","t","maybe","Error","equal","isNothing","end","testInput","input","msg","deepEqual","value","foo","qux","includes"],"mappings":"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","file":"maybe.spec.js","sourcesContent":["import {\n    executeTests\n} from \"../tests/unit-tests.js\";\n\nimport maybeDefinition from \"./maybe\";\n\nconst {\n    createErroneousMonad,\n    createSuccessfulMonad,\n    getErroneousValue,\n    getSuccessfulValue,\n    isInErrorState,\n    toString\n} = maybeDefinition;\n\nexecuteTests(\"Maybe Monad definition\", [{\n    name: \"createErroneousMonad()\",\n    assertions: [{\n        when: \"...everytime\",\n        should: \"return a Maybe(Nothing)\",\n        test: (test) => test(function(t) {\n            const maybe = createErroneousMonad(new Error(\"DERP\"));\n            t.equal(maybe.isNothing, true, \"It is a Nothing\");\n            t.end();\n        })\n    }]\n}, {\n    name: \"createSuccessfulMonad()\",\n    assertions: [{\n        when: \"...everytime\",\n        should: \"return a Maybe(Something) with given input as internal value\",\n        test: (test) => test(function(t) {\n            const testInput = function(input, msg) {\n                const maybe = createSuccessfulMonad(input);\n                t.deepEqual(!!maybe.isNothing, false, `is a Something for ${msg}`);\n                t.deepEqual(maybe.value, input, `Value is ok for ${msg}`);\n            };\n            testInput(\"foo\", \"Strings\");\n            testInput(123, \"Numbers\");\n            testInput({}, \"empty Objects\");\n            testInput({\n                foo: \"bar\",\n                qux: \"baz\"\n            }, \"non-empty Objects\");\n            testInput([], \"empty Arrays\");\n            testInput([\"foo\", \"bar\", \"qux\"], \"non-empty Arrays\");\n            t.end();\n        })\n    }]\n}, {\n    name: \"getErroneousValue()\",\n    assertions: [{\n        when: \"given any Maybe(Nothing) monad\",\n        should: \"return null\",\n        test: (test) => test(function(t) {\n            t.equal(getErroneousValue(createErroneousMonad()), null);\n            t.end();\n        })\n    }]\n}, {\n    name: \"getSuccessfulValue()\",\n    assertions: [{\n        when: \"given any Maybe(Something)\",\n        should: \"return the Somthing value\",\n        test: (test) => test(function(t) {\n            const testInput = (input, msg) => t.deepEqual(\n                getSuccessfulValue(createSuccessfulMonad(input)), input, `Ok for ${msg}`\n            );\n            testInput(\"foo\", \"Strings\");\n            testInput(123, \"Numbers\");\n            testInput({}, \"empty Objects\");\n            testInput({\n                foo: \"bar\",\n                qux: \"baz\"\n            }, \"non-empty Objects\");\n            testInput([], \"empty Arrays\");\n            testInput([\"foo\", \"bar\", \"qux\"], \"non-empty Arrays\");\n            t.end();\n        })\n    }]\n}, {\n    name: \"isInErrorState()\",\n    assertions: [{\n        when: \"given any Maybe(Something)\",\n        should: \"return false\",\n        test: (test) => test(function(t) {\n            const testInput = (input, msg) => t.deepEqual(\n                isInErrorState(createSuccessfulMonad(input)), false, `Ok for ${msg}`\n            );\n            testInput(\"foo\", \"Strings\");\n            testInput(123, \"Numbers\");\n            testInput({}, \"empty Objects\");\n            testInput({\n                foo: \"bar\",\n                qux: \"baz\"\n            }, \"non-empty Objects, without an isNothing property\");\n            testInput({\n                foo: \"bar\",\n                qux: \"baz\",\n                isNothing: false\n            }, \"non-empty Objects, with a falsy isNothing property\");\n            testInput([], \"empty Arrays\");\n            testInput([\"foo\", \"bar\", \"qux\"], \"non-empty Arrays\");\n            t.end();\n        })\n    }, {\n        when: \"given any Maybe(Nothing)\",\n        should: \"return true\",\n        test: (test) => test(function(t) {\n            const testInput = (input, msg) => t.deepEqual(\n                isInErrorState(createErroneousMonad(input)), true, `Ok for ${msg}`\n            );\n            testInput(new Error(\"DERP\"), \"Errors\");\n            testInput({\n                foo: \"bar\",\n                isNothing: true\n            }, \"Objects forcibly having a truthy isNothing property\");\n            t.end();\n        })\n    }]\n}, {\n    name: \"toString()\",\n    assertions: [{\n        when: \"given any Maybe(Something)\",\n        should: \"return a String stating the Monad is a Maybe(Something)\",\n        test: (test) => test(function(t) {\n            const maybe = createSuccessfulMonad(\"foo\");\n            t.equal(\n                toString(maybe).includes(\"Maybe\"), true,\n                \"it states that given input is an Maybe\"\n            );\n            t.equal(\n                toString(maybe).includes(\"Something\"), true,\n                \"it states that given input is a Maybe(Something)\"\n            );\n            t.end();\n        })\n    }, {\n        when: \"given any Maybe(Nothing)\",\n        should: \"return a String stating the Monad is a Maybe(Nothing)\",\n        test: (test) => test(function(t) {\n            const maybe = createErroneousMonad(\"foo\");\n            t.equal(\n                toString(maybe).includes(\"Maybe\"), true,\n                \"it states that given input is a Maybe\"\n            );\n            t.equal(\n                toString(maybe).includes(\"Nothing\"), true,\n                \"it states that given input is a Maybe(Nothing)\"\n            );\n            t.end();\n        })\n    }]\n}]);\n"]}