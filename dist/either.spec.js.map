{"version":3,"sources":["../src/either.spec.js"],"names":["m","__filename","name","assertions","when","should","test","t","testedModule","equal","createEither","isLeft","end","undefined","NaN","right","deepEqual","err","Error","newEither","left","stack","either","isEither","toString","map","throwFnHO","s","ifLeft","idFn","includes","eitherFlow","a","b","applier","debug"],"mappings":"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","file":"either.spec.js","sourcesContent":["import {\n    executeTests,\n    prepareForTests,\n    utilityFunctions\n} from \"../tests/unit-tests.js\";\n\nconst m = prepareForTests(__filename);\n\nexecuteTests(\"Either implementation\", [{\n    name: \"createEither() - Creating a Either\",\n    assertions: [{\n        when: \"called without any input\",\n        should: \"return a Either(Left())\",\n        test: (test) => test(function(t) {\n            const testedModule = m({});\n            t.equal(\n                testedModule.createEither().isLeft(),\n                true\n            );\n            t.end();\n        })\n    }, {\n        when: \"called with any null type\",\n        should: \"return a Either(Left())\",\n        test: (test) => test(function(t) {\n            const testedModule = m({});\n            t.equal(testedModule.createEither(null).isLeft(), true, \"Ok for null\");\n            t.equal(testedModule.createEither(undefined).isLeft(), true, \"Ok for undefined\");\n            t.equal(testedModule.createEither(NaN).isLeft(), true, \"Ok for NaN\");\n            t.end();\n        })\n    }, {\n        when: \"called with any non-null type\",\n        should: \"return a Either(Left(), Right(Something))\",\n        test: (test) => test(function(t) {\n            const testedModule = m({});\n            t.equal(testedModule.createEither(\"foo\").isLeft(), false, \"Not a Left()\");\n            t.equal(testedModule.createEither(\"foo\").right, \"foo\", \"Right has correct value\");\n            t.equal(testedModule.createEither(123).isLeft(), false, \"Not a Left()\");\n            t.equal(testedModule.createEither(123).right, 123, \"Right has correct value\");\n            t.equal(testedModule.createEither([]).isLeft(), false, \"Not a Left()\");\n            t.deepEqual(testedModule.createEither([]).right, [], \"Right has correct value\");\n            t.equal(testedModule.createEither({}).isLeft(), false, \"Not a Left()\");\n            t.deepEqual(testedModule.createEither({}).right, {}, \"Right has correct value\");\n            t.end();\n        })\n    }, {\n        when: \"called with an Error\",\n        should: \"return a Either(Left(given error), Right())\",\n        test: (test) => test(function(t) {\n            const testedModule = m({});\n            const err = new Error(\"DERP\");\n            const newEither = testedModule.createEither(err);\n            t.equal(newEither.isLeft(), true);\n            t.equal(newEither.left, err.stack);\n            t.end();\n        })\n    }, {\n        when: \"called with a Either\",\n        should: \"return the same Either\",\n        test: (test) => test(function(t) {\n            const testedModule = m({});\n            const either = testedModule.createEither();\n            t.equal(\n                testedModule.createEither(either),\n                either\n            );\n            t.end();\n        })\n    }, {\n        when: \"called with a Function\",\n        should: \"return a Either wrapping the given function application on 'undefined'\",\n        test: (test) => test(function(t) {\n            const testedModule = m({});\n            const either = testedModule.createEither(() => \"foo\");\n            t.equal(either.isEither, true);\n            t.equal(either.isLeft(), false);\n            t.equal(either.right, \"foo\");\n            t.end();\n        })\n    }]\n}, {\n    name: \"createEither() - Using a Either\",\n    assertions: [{\n        when: \"a Either has its toString method called\",\n        should: \"return a string\",\n        test: (test) => test(function(t) {\n            const testedModule = m({});\n            t.equal(typeof testedModule.createEither(\"foo\").toString(), \"string\");\n            t.equal(typeof testedModule.createEither().toString(), \"string\");\n            t.end();\n        })\n    }, {\n        when: \"a Either(Left(Something)) has its map method called with any function\",\n        should: \"return the same Either(Left(Something))) without invoking the mapping function\",\n        test: (test) => test(function(t) {\n            const testedModule = m({});\n            const either = testedModule.createEither();\n            t.equal(\n                either.map(utilityFunctions.throwFnHO(\"I shan't be thrown !\")),\n                either\n            );\n            t.end();\n        })\n    }, {\n        when: \"a Either(Right(Something)) has its map method called with any succeeding function\",\n        should: \"return a new Either(Right(Something)) wrapping the application result of given function onto its Something\",\n        test: (test) => test(function(t) {\n            const testedModule = m({});\n            const either = testedModule.createEither(\"foo\");\n            const newEither = either.map((s) => s + \"bar\");\n            t.equal(newEither.isEither, true, \"Applying map() results in a Either\");\n            t.equal(newEither === either, false, \"A different Either instance\");\n            t.equal(newEither.right, \"foobar\", \"Its content is the function application\");\n            t.end();\n        })\n    }, {\n        when: \"a Either(Right(Something)) has its map method called with any failing function\",\n        should: \"return a new Either(Left(failing error))\",\n        test: (test) => test(function(t) {\n            const testedModule = m({});\n            const err = new Error(\"DERP\");\n            const either = testedModule.createEither(\"foo\");\n            const newEither = either.map(function() {\n                throw err;\n            });\n            t.equal(newEither.isEither, true, \"Applying map() results in a Either\");\n            t.equal(newEither === either, false, \"A different Either instance\");\n            t.equal(newEither.isLeft(), true, \"Resulting Either is a Either(Left())\");\n            t.equal(newEither.left, err.stack, \"Left content is the thrown error stack\");\n            t.end();\n        })\n    }, {\n        when: \"a Either(Right()) has its ifLeft method called, regardless of given input\",\n        should: \"return the value wrapped in its Right()\",\n        test: (test) => test(function(t) {\n            const testedModule = m({});\n            const either = testedModule.createEither(\"foo\");\n            t.equal(\n                either.ifLeft(utilityFunctions.throwFnHO(\"I shan't be thrown !\")),\n                \"foo\"\n            );\n            t.end();\n        })\n    }, {\n        when: \"a Either(Left()) has its ifLeft method called with a function\",\n        should: \"return the application of given function on the Left() value\",\n        test: (test) => test(function(t) {\n            const testedModule = m({});\n            const either = testedModule.createEither();\n            t.equal(\n                either.ifLeft(utilityFunctions.idFn).includes(\"Either is a Left()\"),\n                true\n            );\n            t.end();\n        })\n    }, {\n        when: \"a Either(Left()) has its ifLeft method called with anything else than function\",\n        should: \"return the given input\",\n        test: (test) => test(function(t) {\n            const testedModule = m({});\n            const either = testedModule.createEither();\n            t.equal(\n                either.ifLeft(\"foo\"),\n                \"foo\"\n            );\n            t.end();\n        })\n    }]\n}, {\n    name: \"eitherFlow()\",\n    assertions: [{\n        when: \"called with no function list\",\n        should: \"return a function that returns a Either\",\n        test: (test) => test(function(t) {\n            const testedModule = m({});\n            t.equal(\n                testedModule.eitherFlow()().isEither,\n                true\n            );\n            t.end();\n        })\n    }, {\n        when: \"called with a function list\",\n        should: \"return a function that will apply all functions of given list on a given Either()\",\n        test: (test) => test(function(t) {\n            const testedModule = m({});\n            t.equal(\n                testedModule.eitherFlow(\n                    (a) => a + \"bar\",\n                    (b) => b + \"qux\"\n                )(\"foo\").ifLeft(),\n                \"foobarqux\"\n            );\n            t.end();\n        })\n    }, {\n        when: \"called with a function list\",\n        should: \"return a function that has an ifLeft property which is a shortcut to the resulting Either().ifLeft method\",\n        test: (test) => test(function(t) {\n            const testedModule = m({});\n            const applier = testedModule.eitherFlow(\n                (a) => a + \"bar\",\n                (b) => b + \"qux\"\n            ).ifLeft();\n            t.equal(\n                applier(\"foo\"),\n                \"foobarqux\"\n            );\n            t.end();\n        })\n    }]\n}, {\n    name: \"eitherFlow.debug()\",\n    assertions: [{\n        when: \"called with no function list\",\n        should: \"return a function that returns a Either\",\n        test: (test) => test(function(t) {\n            const testedModule = m({});\n            t.equal(\n                testedModule.eitherFlow.debug()().isEither,\n                true\n            );\n            t.end();\n        })\n    }, {\n        when: \"called with a function list\",\n        should: \"return a function that will apply all functions of given list on a given Either()\",\n        test: (test) => test(function(t) {\n            const testedModule = m({});\n            t.equal(\n                testedModule.eitherFlow.debug(\n                    (a) => a + \"bar\",\n                    (b) => b + \"qux\"\n                )(\"foo\").ifLeft(),\n                \"foobarqux\"\n            );\n            t.end();\n        })\n    }, {\n        when: \"called with a function list\",\n        should: \"return a function that will ignore all subsequent function call upon encountering an Either(Left())\",\n        test: (test) => test(function(t) {\n            const testedModule = m({});\n            t.equal(\n                testedModule.eitherFlow.debug(\n                    (a) => a + \"bar\",\n                    utilityFunctions.throwFnHO(\"DERP\"),\n                    // istanbul ignore next\n                    (b) => b + \"qux\"\n                    )(\"foo\").ifLeft(utilityFunctions.idFn).includes(\"DERP\"),\n                true\n            );\n            t.end();\n        })\n    }, {\n        when: \"called with a function list\",\n        should: \"return a function that has an ifLeft property which is a shortcut to the resulting Either().ifLeft method\",\n        test: (test) => test(function(t) {\n            const testedModule = m({});\n            const applier = testedModule.eitherFlow.debug(\n                (a) => a + \"bar\",\n                (b) => b + \"qux\"\n            ).ifLeft();\n            t.equal(\n                applier(\"foo\"),\n                \"foobarqux\"\n            );\n            t.end();\n        })\n    }]\n}]);\n"]}